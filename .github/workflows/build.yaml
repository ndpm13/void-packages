name: Build & Publish
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "srcpkgs/**"
  push:
    branches:
      - "ci-**"
      - "main"
      - "master"
    paths:
      - "srcpkgs/**"
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

env:
  PACKAGES: "brave,ferdium,librewolf,vscodium,obsidian,onlyoffice,freetube,tutanota-desktop,drawio-desktop,sklauncher,cinny-desktop"

jobs:
  build:
    name: Build x86_64 glibc packages
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/void-linux/void-buildroot-glibc:latest
      options: --privileged
    steps:
      - name: Setup environment
        run: |
          # Set up PATH and mirrors
          export PATH="/usr/libexec/chroot-git:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/bin:/tmp/bin"
          mkdir -p /etc/xbps.d
          cp /usr/share/xbps.d/*-repository-*.conf /etc/xbps.d/
          sed -i 's|repo-default|repo-ci|g' /etc/xbps.d/*-repository-*.conf

          # Update system
          xbps-install -Syu xbps
          xbps-install -Syu
          xbps-install -y tar curl openssh unzip git jq github-cli

      - name: Checkout void-packages repository
        uses: actions/checkout@v4
        with:
          repository: void-linux/void-packages
          path: void-packages

      - name: Checkout custom packages
        uses: actions/checkout@v4
        with:
          path: custom-packages

      - name: Setup and build packages
        run: |
          # Copy custom packages to void-packages
          cp -r custom-packages/srcpkgs/* void-packages/srcpkgs/
          cd void-packages

          # Setup void-packages
          echo "Setting up void-packages..."
          ./xbps-src binary-bootstrap

          # Build packages
          echo "Building packages..."
          mkdir -p ~/packages
          IFS=',' read -ra PKGS <<< "${PACKAGES}"
          for pkg in "${PKGS[@]}"; do
            echo "Building package: $pkg"
            ./xbps-src pkg -j$(nproc) "$pkg"

            # Find the built package
            find ~/void-packages/hostdir/binpkgs -name "$pkg-*x86_64.xbps" -exec cp {} ~/packages/ \;
          done

          # List packages
          echo "Packages built:"
          ls -la ~/packages/

      - name: Create repository index
        run: |
          cd ~/packages
          if [ -n "$(ls -A)" ]; then
            echo "Indexing packages..."
            xbps-rindex -a *.xbps
            echo "Index created successfully"
          else
            echo "No packages to index"
            exit 1
          fi

      - name: Delete existing release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the release ID for the 'latest' tag
          RELEASE_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/releases/tags/latest \
            --jq '.id' 2>/dev/null || echo "")

          if [ -n "$RELEASE_ID" ]; then
            echo "Found existing release with ID: $RELEASE_ID"

            # Get all assets for this release
            ASSETS=$(gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets \
              --jq '.[].id' 2>/dev/null || echo "")

            # Delete each asset
            for ASSET_ID in $ASSETS; do
              echo "Deleting asset: $ASSET_ID"
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                /repos/$GITHUB_REPOSITORY/releases/assets/$ASSET_ID
            done

            echo "All assets deleted"
          else
            echo "No existing release found with tag 'latest'"
          fi

      - name: Package files
        run: |
          cd ~/packages
          ls -la
          if [ -n "$(ls -A)" ]; then
            echo "Creating archive..."
            tar -czvf xbps_packages.tar.gz *.xbps x86_64-repodata
            echo "Archive created successfully"
          else
            echo "No packages to archive"
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ~/packages/*.xbps
            ~/packages/x86_64-repodata
            ~/packages/xbps_packages.tar.gz
          tag_name: latest
          name: Latest x86_64 glibc Packages
          body: |
            Latest build of x86_64 glibc XBPS packages
            Built on: ${{ github.event.repository.updated_at }}
          prerelease: false
